{"meta":{"title":"MR.L' BLOG","subtitle":"","description":"","author":"MR.L","url":"https://luhongyan.gitee.io/blog","root":"/blog/"},"pages":[{"title":"404 Not Found","date":"2020-07-28T15:15:05.330Z","updated":"2020-07-28T15:15:05.330Z","comments":true,"path":"404.html","permalink":"https://luhongyan.gitee.io/blog/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2020-07-28T15:16:58.981Z","updated":"2020-07-28T15:16:58.981Z","comments":true,"path":"about/index.html","permalink":"https://luhongyan.gitee.io/blog/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"我的朋友们","date":"2020-07-28T15:16:43.600Z","updated":"2020-07-28T15:16:43.600Z","comments":true,"path":"friends/index.html","permalink":"https://luhongyan.gitee.io/blog/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"所有分类","date":"2020-07-28T15:11:58.635Z","updated":"2020-07-28T15:11:58.635Z","comments":true,"path":"categories/index.html","permalink":"https://luhongyan.gitee.io/blog/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-07-28T15:12:47.318Z","updated":"2020-07-28T15:12:47.318Z","comments":true,"path":"tags/index.html","permalink":"https://luhongyan.gitee.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用Hexo+Volantis搭建精美博客","slug":"使用Hexo+Volantis搭建精美博客","date":"2020-07-26T16:00:00.000Z","updated":"2020-07-29T16:00:00.000Z","comments":true,"path":"post/4b16ba9e.html","link":"","permalink":"https://luhongyan.gitee.io/blog/post/4b16ba9e.html","excerpt":"Volantis，一个高度模块化和可定制化、功能相对完善的 Hexo 博客主题，既可以用作个人博客，也适合用来搭建文档。","text":"Volantis，一个高度模块化和可定制化、功能相对完善的 Hexo 博客主题，既可以用作个人博客，也适合用来搭建文档。 一、环境要求如果您从旧版本更新或着其它主题迁移，请确保环境版本不要太低，否则会产生兼容性问题。 1234Hexo: 4.2hexo-cli: 3.1node.js: 12.16 # LTS版npm: 6.13 二、下载与安装第 1/3 步：下载主题源码到 themes/ 文件夹 1234git clone https:&#x2F;&#x2F;github.com&#x2F;volantis-x&#x2F;hexo-theme-volantis themes&#x2F;volantis# 或者使用国内镜像git clone https:&#x2F;&#x2F;e.coding.net&#x2F;volantis&#x2F;volantis&#x2F;volantis.git themes&#x2F;volantis 第 2/3 步：修改站点配置文件 blog/_config.yml 1theme: volantis 第 3/3 步：检查并安装依赖 安装 Hexo 搜索的依赖包： 1npm i -S hexo-generator-search hexo-generator-json-content 安装 stylus 渲染器： 1npm i -S hexo-renderer-stylus 三、主题配置参考 https://volantis.js.org 1、设置导航栏新建一个文件，专门存放导航栏菜单配置，文件的路径为： 1blog&#x2F;source&#x2F;_data&#x2F;menu.yml 文件的内容为： 1234567891011121314151617181920212223242526272829303132333435- name: 主页 icon: fas fa-rss url: &#x2F;- name: 分类 icon: fas fa-folder-open url: categories&#x2F;- name: 标签 icon: fas fa-tags url: tags&#x2F;- name: 归档 icon: fas fa-archive url: archives&#x2F;- name: 更多 icon: fas fa-ellipsis-v rows: - name: 主题源码 url: https:&#x2F;&#x2F;github.com&#x2F;volantis-x&#x2F;hexo-theme-volantis&#x2F; - name: 更新日志 url: https:&#x2F;&#x2F;github.com&#x2F;volantis-x&#x2F;hexo-theme-volantis&#x2F;releases&#x2F; - name: hr - name: 有疑问？ rows: - name: 看 FAQ url: faqs&#x2F; - name: 看 本站源码 url: https:&#x2F;&#x2F;github.com&#x2F;volantis-x&#x2F;volantis-docs&#x2F; - name: 提 Issue url: https:&#x2F;&#x2F;github.com&#x2F;volantis-x&#x2F;hexo-theme-volantis&#x2F;issues&#x2F; - name: hr - name: 公告和测试博文 url: archives&#x2F; - name: 示例博客 url: examples&#x2F; - name: 特别感谢 url: contributors&#x2F; 2、播放器在子菜单中，新增一个 icon: fas fa-compact-disc 的“菜单”就会被渲染成一个 APlayer 播放器 12- name: 背景音乐 icon: fas fa-compact-disc 3、模块化布局可以自由决定每个页面是否显示侧边栏，侧边栏显示什么小部件，正文区域显示什么卡片，文章卡片显示什么 meta 信息。 1234567891011121314151617181920212223242526# The following can be written in &#96;blog&#x2F;source&#x2F;_data&#x2F;layout.yml&#96;# 文章列表（主页、自定义的列表）布局on_list: # 列表中每一篇文章的meta信息 meta: [title, author, category, date, wordcount, counter, valinecount, pin] # 列表类页面的侧边栏 sidebar: [blogger, category, tagcloud, qrcode] # read more button readmore: 阅读全文 &lt;i class&#x3D;&quot;fas fa-chevron-right&quot;&gt;&lt;&#x2F;i&gt;# 页面布局on_page: # 文章页面主体元素，你也可以在页面的Front-matter中设置 body: [article, comments] # 默认的meta信息，文章中没有配置则按照这里的配置来显示，设置为false则不显示 # 其中，title只在header中有效，music和thumbnail无需在这里设置，文章中有则显示 # 如果tags放置在meta.header中，那么在post列表中不显示（因为卡片下方已经有了） meta: header: [title, author, category, date, pin] footer: [updated, tags, btns, share] # 文章页面的侧边栏 sidebar: [qrcode, toc]# 文章布局，参数继承自 on_pageon_post: # 文章页脚，自动在每一篇文章末尾添加 article_footer: [references, related_repos, copyright, donate]# 其他的页面布局暂时等于 on_list 4、配置文章作者信息123456789# meta librarymeta: # 文章标题 title: # 暂无配置 # 默认文章作者（可在front-matter中覆盖） author: avatar: &#x2F;assets&#x2F;avatar.jpg name: Mr.L url: &#x2F; 5、页面配置如无特殊说明，本页面的配置信息写在 页面 文件的 front-matter 中。 6、布局模板 取值 含义 page 独立页面 post 文章页面 category 分类页面 tag 标签页面 links 友链页面 list 列表页面 7、front-matterfront-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量 字段 含义 值类型 默认值 layout 布局模版 tring - title 页面标题 String - seo_title 网页标题 String page.title short_title 页面标题（在group列表中显示） String page.title date 创建时间 Date 文件创建时间 updated 更新日期 Date 文件修改时间 permalink 覆盖文章网址 String - music 内部音乐控件 [Object] - robots robots String - keywords 页面关键词 String - description 页面描述、摘要 String - cover 是否显示封面 Bool true meta 文章或页面的meta信息 Bool, Array theme.layout.*.meta sidebar 页面侧边栏 Bool, Array theme.layout.*.sidebar body 页面主体元素 Array theme.layout.on_page.body mathjax 是否渲染公式 Bool, String false thumbnail 缩略图 String false icons 图标 Array [] pin 是否置顶 Bool, String false layout:post 时特有的字段： 字段 含义 值类型 默认值 author 文章作者 [Object] config.author categories 分类 String, Array - tags 标签 String, Array - toc 是否生成目录 Bool true author 字段 含义 值类型 默认值 name 作者名 String config.author avatar 头像 String config.avatar url 链接 String config.url 8、显示迷你音乐播放器标题右边显示迷你音乐播放器，支持的字段有：server、type、id。 123456---music: server: netease # netease, tencent, kugou, xiami, baidu type: song # song, playlist, album, search, artist id: 16846091 # song id &#x2F; playlist id &#x2F; album id &#x2F; search keyword--- 9、标题右边显示缩略图略图仅在文章列表和文章页面显示，不会在归档页面显示。 123---thumbnail: https:&#x2F;&#x2F;img.vim-cn.com&#x2F;17&#x2F;0c7b02722686d1527a1df807dae0794d995860.png--- 10、添加彩色滚动变换字体转自 Hexo博客优化之博客美化系列 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;div id&#x3D;&quot;binft&quot;&gt;&lt;&#x2F;div&gt; &lt;script&gt; var binft &#x3D; function (r) &#123; function t() &#123; return b[Math.floor(Math.random() * b.length)] &#125; function e() &#123; return String.fromCharCode(94 * Math.random() + 33) &#125; function n(r) &#123; for (var n &#x3D; document.createDocumentFragment(), i &#x3D; 0; r &gt; i; i++) &#123; var l &#x3D; document.createElement(&quot;span&quot;); l.textContent &#x3D; e(), l.style.color &#x3D; t(), n.appendChild(l) &#125; return n &#125; function i() &#123; var t &#x3D; o[c.skillI]; c.step ? c.step-- : (c.step &#x3D; g, c.prefixP &lt; l.length ? (c.prefixP &gt;&#x3D; 0 &amp;&amp; (c.text +&#x3D; l[c.prefixP]), c.prefixP++) : &quot;forward&quot; &#x3D;&#x3D;&#x3D; c.direction ? c.skillP &lt; t.length ? (c.text +&#x3D; t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction &#x3D; &quot;backward&quot;, c.delay &#x3D; a) : c.skillP &gt; 0 ? (c.text &#x3D; c.text.slice(0, -1), c.skillP--) : (c.skillI &#x3D; (c.skillI + 1) % o.length, c.direction &#x3D; &quot;forward&quot;)), r.textContent &#x3D; c.text, r.appendChild(n(c.prefixP &lt; l.length ? Math.min(s, s + c.prefixP) : Math.min(s, t.length - c.skillP))), setTimeout(i, d) &#125; var l &#x3D; &quot;&quot;, o &#x3D; [&quot;青青陵上柏，磊磊涧中石。&quot;, &quot;人生天地间，忽如远行客。&quot;,&quot;斗酒相娱乐，聊厚不为薄。&quot;, &quot;驱车策驽马，游戏宛与洛。&quot;,&quot;洛中何郁郁，冠带自相索。&quot;,&quot;长衢罗夹巷，王侯多第宅。&quot;,&quot;两宫遥相望，双阙百余尺。&quot;,&quot;极宴娱心意，戚戚何所迫？&quot;].map(function (r) &#123; return r + &quot;&quot; &#125;), a &#x3D; 2, g &#x3D; 1, s &#x3D; 5, d &#x3D; 75, b &#x3D; [&quot;rgb(110,64,170)&quot;, &quot;rgb(150,61,179)&quot;, &quot;rgb(191,60,175)&quot;, &quot;rgb(228,65,157)&quot;, &quot;rgb(254,75,131)&quot;, &quot;rgb(255,94,99)&quot;, &quot;rgb(255,120,71)&quot;, &quot;rgb(251,150,51)&quot;, &quot;rgb(226,183,47)&quot;, &quot;rgb(198,214,60)&quot;, &quot;rgb(175,240,91)&quot;, &quot;rgb(127,246,88)&quot;, &quot;rgb(82,246,103)&quot;, &quot;rgb(48,239,130)&quot;, &quot;rgb(29,223,163)&quot;, &quot;rgb(26,199,194)&quot;, &quot;rgb(35,171,216)&quot;, &quot;rgb(54,140,225)&quot;, &quot;rgb(76,110,219)&quot;, &quot;rgb(96,84,200)&quot;], c &#x3D; &#123; text: &quot;&quot;, prefixP: -s, skillI: 0, skillP: 0, direction: &quot;forward&quot;, delay: a, step: g &#125;; i() &#125;; binft(document.getElementById(&#39;binft&#39;)); &lt;&#x2F;script&gt; 11、添加字数统计和阅读时长安装以下插件： 1npm i --save hexo-wordcount 修改配置文件，将 wordcount 插件打开 1234plugins: ... # 文章字数统计、阅读时长，开启需要安装插件: npm i --save hexo-wordcount wordcount: true","categories":[{"name":"BLOG","slug":"BLOG","permalink":"https://luhongyan.gitee.io/blog/categories/BLOG/"},{"name":"Volantis","slug":"BLOG/Volantis","permalink":"https://luhongyan.gitee.io/blog/categories/BLOG/Volantis/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://luhongyan.gitee.io/blog/tags/hexo/"},{"name":"Volantis","slug":"Volantis","permalink":"https://luhongyan.gitee.io/blog/tags/Volantis/"}]},{"title":"Elasticsearch集群搭建","slug":"Elasticsearch集群搭建","date":"2019-09-09T16:00:00.000Z","updated":"2020-03-10T16:00:00.000Z","comments":true,"path":"post/8e68c6bd.html","link":"","permalink":"https://luhongyan.gitee.io/blog/post/8e68c6bd.html","excerpt":"本文介绍Elasticsearch集群相关原理与配置。","text":"本文介绍Elasticsearch集群相关原理与配置。 1 安装前准备1.1 安装环境1.1.1 ElasticSearch简介 为何要搭建 Elasticsearch 集群 凡事都要讲究个为什么。在搭建集群之前，我们首先先问一句，为什么我们需要搭建集群？它有什么优势呢？ 高可用性 Elasticsearch 作为一个搜索引擎，我们对它的基本要求就是存储海量数据并且可以在非常短的时间内查询到我们想要的信息。所以第一步我们需要保证的就是 Elasticsearch 的高可用性，什么是高可用性呢？它通常是指，通过设计减少系统不能提供服务的时间。假设系统一直能够提供服务，我们说系统的可用性是 100%。如果系统在某个时刻宕掉了，比如某个网站在某个时间挂掉了，那么就可以它临时是不可用的。所以，为了保证 Elasticsearch 的高可用性，我们就应该尽量减少 Elasticsearch 的不可用时间。 那么怎样提高 Elasticsearch 的高可用性呢？这时集群的作用就体现出来了。假如 Elasticsearch 只放在一台服务器上，即单机运行，假如这台主机突然断网了或者被攻击了，那么整个 Elasticsearch 的服务就不可用了。但如果改成 Elasticsearch 集群的话，有一台主机宕机了，还有其他的主机可以支撑，这样就仍然可以保证服务是可用的。 那可能有的小伙伴就会说了，那假如一台主机宕机了，那么不就无法访问这台主机的数据了吗？那假如我要访问的数据正好存在这台主机上，那不就获取不到了吗？难道其他的主机里面也存了一份一模一样的数据？那这岂不是很浪费吗？ 为了解答这个问题，这里就引出了 Elasticsearch 的信息存储机制了。首先解答上面的问题，一台主机宕机了，这台主机里面存的数据依然是可以被访问到的，因为在其他的主机上也有备份，但备份的时候也不是整台主机备份，是分片备份的，那这里就又引出了一个概念——分片。 分片，英文叫做 Shard，顾名思义，分片就是对数据切分成了多个部分。我们知道 Elasticsearch 中一个索引（Index）相当于是一个数据库，如存某网站的用户信息，我们就建一个名为 user 的索引。但索引存储的时候并不是整个存一起的，它是被分片存储的，Elasticsearch 默认会把一个索引分成五个分片，当然这个数字是可以自定义的。分片是数据的容器，数据保存在分片内，分片又被分配到集群内的各个节点里。当你的集群规模扩大或者缩小时， Elasticsearch 会自动的在各节点中迁移分片，使得数据仍然均匀分布在集群里，所以相当于一份数据被分成了多份并保存在不同的主机上。 那这还是没解决问题啊，如果一台主机挂掉了，那么这个分片里面的数据不就无法访问了？别的主机都是存储的其他的分片。其实是可以访问的，因为其他主机存储了这个分片的备份，叫做副本，这里就引出了另外一个概念——副本。 副本，英文叫做 Replica，同样顾名思义，副本就是对原分片的复制，和原分片的内容是一样的，Elasticsearch 默认会生成一份副本，所以相当于是五个原分片和五个分片副本，相当于一份数据存了两份，并分了十个分片，当然副本的数量也是可以自定义的。这时我们只需要将某个分片的副本存在另外一台主机上，这样当某台主机宕机了，我们依然还可以从另外一台主机的副本中找到对应的数据。所以从外部来看，数据结果是没有任何区别的。 一般来说，Elasticsearch 会尽量把一个索引的不同分片存储在不同的主机上，分片的副本也尽可能存在不同的主机上，这样可以提高容错率，从而提高高可用性。 但这时假如你只有一台主机，那不就没办法了吗？分片和副本其实是没意义的，一台主机挂掉了，就全挂掉了。 健康状态 针对一个索引，Elasticsearch 中其实有专门的衡量索引健康状况的标志，分为三个等级： green，绿色。这代表所有的主分片和副本分片都已分配。你的集群是 100% 可用的。 yellow，黄色。所有的主分片已经分片了，但至少还有一个副本是缺失的。不会有数据丢失，所以搜索结果依然是完整的。不过，你的高可用性在某种程度上被弱化。如果更多的分片消失，你就会丢数据了。所以可把 yellow 想象成一个需要及时调查的警告。 red，红色。至少一个主分片以及它的全部副本都在缺失中。这意味着你在缺少数据：搜索只能返回部分数据，而分配到这个分片上的写入请求会返回一个异常。 如果你只有一台主机的话，其实索引的健康状况也是 yellow，因为一台主机，集群没有其他的主机可以防止副本，所以说，这就是一个不健康的状态，因此集群也是十分有必要的。 存储空间 另外，既然是群集，那么存储空间肯定也是联合起来的，假如一台主机的存储空间是固定的，那么集群它相对于单个主机也有更多的存储空间，可存储的数据量也更大。 所以综上所述，我们需要一个集群！ 详细了解 Elasticsearch 集群 接下来我们再来了解下集群的结构是怎样的。 首先我们应该清楚多台主机构成了一个集群，每台主机称作一个节点（Node）。 如图就是一个三节点的集群： 在图中，每个 Node 都有三个分片，其中 P 开头的代表 Primary 分片，即主分片，R 开头的代表 Replica 分片，即副本分片。所以图中主分片 1、2，副本分片 0 储存在 1 号节点，副本分片 0、1、2 储存在 2 号节点，主分片 0 和副本分片 1、2 储存在 3 号节点，一共是 3 个主分片和 6 个副本分片。同时我们还注意到 1 号节点还有个 MASTER 的标识，这代表它是一个主节点，它相比其他的节点更加特殊，它有权限控制整个集群，比如资源的分配、节点的修改等等。 这里就引出了一个概念就是节点的类型，我们可以将节点分为这么四个类型： 主节点：即 Master 节点。主节点的主要职责是和集群操作相关的内容，如创建或删除索引，跟踪哪些节点是群集的一部分，并决定哪些分片分配给相关的节点。稳定的主节点对集群的健康是非常重要的。默认情况下任何一个集群中的节点都有可能被选为主节点。索引数据和搜索查询等操作会占用大量的cpu，内存，io资源，为了确保一个集群的稳定，分离主节点和数据节点是一个比较好的选择。虽然主节点也可以协调节点，路由搜索和从客户端新增数据到数据节点，但最好不要使用这些专用的主节点。一个重要的原则是，尽可能做尽量少的工作。 数据节点：即 Data 节点。数据节点主要是存储索引数据的节点，主要对文档进行增删改查操作，聚合操作等。数据节点对 CPU、内存、IO 要求较高，在优化的时候需要监控数据节点的状态，当资源不够的时候，需要在集群中添加新的节点。 负载均衡节点：也称作 Client 节点，也称作客户端节点。当一个节点既不配置为主节点，也不配置为数据节点时，该节点只能处理路由请求，处理搜索，分发索引操作等，从本质上来说该客户节点表现为智能负载平衡器。独立的客户端节点在一个比较大的集群中是非常有用的，他协调主节点和数据节点，客户端节点加入集群可以得到集群的状态，根据集群的状态可以直接路由请求。 预处理节点：也称作 Ingest 节点，在索引数据之前可以先对数据做预处理操作，所有节点其实默认都是支持 Ingest 操作的，也可以专门将某个节点配置为 Ingest 节点。 以上就是节点几种类型，一个节点其实可以对应不同的类型，如一个节点可以同时成为主节点和数据节点和预处理节点，但如果一个节点既不是主节点也不是数据节点，那么它就是负载均衡节点。具体的类型可以通过具体的配置文件来设置。 1.1.2 操作系统 Red Hat 7.5（64位） 1.1.3 主机规划 服务类型 IP地址 端口 ElasticSearch 172.10.0.13 9200 ElasticSearch 172.10.0.14 9200 1.1.4 系统配置说明 9300端口： ES节点之间通讯使用 9200端口： ES节点 和 外部 通讯使用 9300是tcp通讯端口，集群间和TCPClient都走的它；9200是http协议的RESTful接口 123firewall-cmd --zone&#x3D;public --add-port&#x3D;9200&#x2F;tcp --permanentfirewall-cmd --zone&#x3D;public --add-port&#x3D;9300&#x2F;tcp --permanentfirewall-cmd --reload 1.1.5 ElasticSearch版本号说明 ElasticSearch版本为5.6.9。 2 软件安装2.1 安装JDK略 2.2 创建ElasticSearch用户2.2.1 使用root用户ssh登录服务器，以172.16.90.43为例 1ssh root@172.16.90.43 2.2.1 创建用户 1useradd -d &#x2F;home&#x2F;es es 2.2.1 设置密码 1passwd es 2.3 安装ElasticSearch2.3.1 创建目录 1mkdir -p &#x2F;opt&#x2F;yusys&#x2F;elasticsearch 2.3.2 切换到目录/opt/yusys/elasticsearch 1cd &#x2F;opt&#x2F;yusys&#x2F;elasticsearch 2.3.1 将{上线包}\\installPackages\\elasticsearch\\elasticsearch-5.6.9.tar.gz上传到当前目录 2.3.2 解压缩elasticsearch-5.6.9.tar.gz 1tar -zxvf elasticsearch-5.6.9.tar.gz 2.3.3 配置ElasticSearch 12cd &#x2F;opt&#x2F;yusys&#x2F;elasticsearch&#x2F;elasticsearch-5.6.9&#x2F;configvim elasticsearch.yml 配置参数描述： 123456789101112131415161718192021222324252627282930313233343536373839404142434445集群的名称通过 cluster.name 可以配置集群的名称，集群是一个整体，因此名称都要一致，所有主机都配置成相同的名称，配置示例：cluster.name: germey-es-clusters节点的名称通过 node.name 可以配置每个节点的名称，每个节点都是集群的一部分，每个节点名称都不要相同，可以按照顺序编号，配置示例：node.name: es-node-1其他的主机可以配置为 es-node-2、es-node-3 等。是否有资格成为主节点通过 node.master 可以配置该节点是否有资格成为主节点，如果配置为 true，则主机有资格成为主节点，配置为 false 则主机就不会成为主节点，可以去当数据节点或负载均衡节点。注意这里是有资格成为主节点，不是一定会成为主节点，主节点需要集群经过选举产生。这里我配置所有主机都可以成为主节点，因此都配置为 true，配置示例：node.master: true是否是数据节点通过 node.data 可以配置该节点是否为数据节点，如果配置为 true，则主机就会作为数据节点，注意主节点也可以作为数据节点，当 node.master 和 node.data 均为 false，则该主机会作为负载均衡节点。这里我配置所有主机都是数据节点，因此都配置为 true，配置示例：node.data: true数据和日志路径通过 path.data 和 path.logs 可以配置 Elasticsearch 的数据存储路径和日志存储路径，可以指定任意位置，这里我指定存储到 1T 硬盘对应的路径下，另外注意一下写入权限问题，配置示例：path.data: &#x2F;datadrive&#x2F;elasticsearch&#x2F;datapath.logs: &#x2F;datadrive&#x2F;elasticsearch&#x2F;logs设置访问的地址和端口我们需要设定 Elasticsearch 运行绑定的 Host，默认是无法公开访问的，如果设置为主机的公网 IP 或 0.0.0.0 就是可以公开访问的，这里我们可以都设置为公开访问或者部分主机公开访问，如果是公开访问就配置为：network.host: 0.0.0.0如果不想被公开访问就不用配置。另外还可以配置访问的端口，默认是 9200：http.port: 9200集群地址设置通过 discovery.zen.ping.unicast.hosts 可以配置集群的主机地址，配置之后集群的主机之间可以自动发现，这里我配置的是内网地址，配置示例：discovery.zen.ping.unicast.hosts: [&quot;10.0.0.4&quot;, &quot;10.0.0.5&quot;, &quot;10.0.0.6&quot;, &quot;10.0.0.7&quot;, &quot;10.0.0.8&quot;, &quot;10.0.0.9&quot;, &quot;10.0.0.10&quot;]这里请改成你的主机对应的 IP 地址。节点数目相关配置为了防止集群发生“脑裂”，即一个集群分裂成多个，通常需要配置集群最少主节点数目，通常为 (可成为主节点的主机数目 &#x2F; 2) + 1，例如我这边可以成为主节点的主机数目为 7，那么结果就是 4，配置示例：discovery.zen.minimum_master_nodes: 4另外还可以配置当最少几个节点回复之后，集群就正常工作，这里我设置为 4，可以酌情修改，配置示例：gateway.recover_after_nodes: 4 配置信息如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Elasticsearch Configuration &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;## NOTE: Elasticsearch comes with reasonable defaults for most settings.# Before you set out to tweak and tune the configuration, make sure you# understand what are you trying to accomplish and the consequences.## The primary way of configuring a node is via this file. This template lists# the most important settings you may want to configure for a production cluster.## Please consult the documentation for further information on configuration options:# https:&#x2F;&#x2F;www.elastic.co&#x2F;guide&#x2F;en&#x2F;elasticsearch&#x2F;reference&#x2F;index.html## ---------------------------------- Cluster -----------------------------------## Use a descriptive name for your cluster:#cluster.name: crm-es-cluster## ------------------------------------ Node ------------------------------------## Use a descriptive name for the node:#node.name: crm-es-node-1## Add custom attributes to the node:##node.attr.rack: r1## ----------------------------------- Paths ------------------------------------node.master: truenode.data: true## Path to directory where to store the data (separate multiple locations by comma):#path.data: &#x2F;opt&#x2F;yusys&#x2F;elasticsearch&#x2F;elasticsearch-5.6.9&#x2F;data## Path to log files:#path.logs: &#x2F;opt&#x2F;yusys&#x2F;elasticsearch&#x2F;elasticsearch-5.6.9&#x2F;logs## ----------------------------------- Memory -----------------------------------## Lock the memory on startup:##bootstrap.memory_lock: true## Make sure that the heap size is set to about half the memory available# on the system and that the owner of the process is allowed to use this# limit.## Elasticsearch performs poorly when the system is swapping the memory.## ---------------------------------- Network -----------------------------------## Set the bind address to a specific IP (IPv4 or IPv6):#network.host: 0.0.0.0## Set a custom port for HTTP:#http.port: 9200## For more information, consult the network module documentation.## --------------------------------- Discovery ----------------------------------## Pass an initial list of hosts to perform discovery when new node is started:# The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]#discovery.zen.ping.unicast.hosts: [&quot;172.10.0.13&quot;, &quot;172.10.0.14&quot;]## Prevent the &quot;split brain&quot; by configuring the majority of nodes (total number of master-eligible nodes &#x2F; 2 + 1):#discovery.zen.minimum_master_nodes: 1## For more information, consult the zen discovery module documentation.## ---------------------------------- Gateway -----------------------------------## Block initial recovery after a full cluster restart until N nodes are started:#gateway.recover_after_nodes: 2## For more information, consult the gateway module documentation.## ---------------------------------- Various -----------------------------------## Require explicit names when deleting indices:##action.destructive_requires_name: truehttp.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot; 2.4 启动ElasticSearch前准备2.4.1 授权 在root用户下 1cd &#x2F;opt&#x2F;yusys&#x2F; 1chown -R es:es elasticsearch 2.4.2 修改limits.conf 在root用户下 1vim &#x2F;etc&#x2F;security&#x2F;limits.conf 新增如下配置 1234* soft nofile 65536* hard nofile 65536* soft nproc 4096* hard nproc 4096 2.4.3 修改sysctl.conf 1vim &#x2F;etc&#x2F;sysctl.conf 新增如下配置 1vm.max_map_count&#x3D;262144 执行sysctl -p使之生效 1sysctl -p 2.5 ElasticSearch启动、关闭切换到es用户，启动 12cd &#x2F;opt&#x2F;yusys&#x2F;elasticsearch&#x2F;elasticsearch-5.6.9&#x2F;bin.&#x2F;elasticsearch -d #-d为后台启动 关闭 1jps 输出如下： 12321584 Elasticsearch21598 Jps2543 -- main class information unavailable 杀掉进程 1kill -9 21584 2.6 ElasticSearch集群验证2.6.1 查看集群健康状态 在集群中的任意一台机器上，执行命令： 1curl 127.0.0.1:9200&#x2F;_cat&#x2F;health?v 运行结果如下： 12epoch timestamp cluster status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent1566463404 16:43:24 crm-es-cluster green 2 2 0 0 0 0 0 0 - 100.0% 集群的状态（status）：red红表示集群不可用，有故障。yellow黄表示集群不可靠但可用，一般单节点时就是此状态。green正常状态，表示集群一切正常。 节点数（node.total）：节点数，这里是2，表示该集群有两个节点。 2.6.2 查看集群的节点 在集群中的任意一台机器上，执行命令： 1curl 127.0.0.1:9200&#x2F;_cat&#x2F;nodes?v 运行结果如下： 123ip heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name172.16.90.41 14 96 27 3.62 3.37 2.46 mdi * crm-es-node-1172.16.90.42 15 96 25 0.00 0.01 0.05 mdi - crm-es-node-2 这些信息中比较重要的是master列，带*星号表明该节点是主节点。带-表明该节点是从节点。 另外还有heap.percent堆内存使用情况，ram.percent运行内存使用情况，cpu使用情况。 3 添加IK分词器3.1 切换到/opt/yusys/elasticsearch/elasticsearch-5.6.9/plugins 1cd &#x2F;opt&#x2F;yusys&#x2F;elasticsearch&#x2F;elasticsearch-5.6.9&#x2F;plugins 3.2 将{上线包}\\installPackages\\elasticsearch\\elasticsearch-analysis-ik-5.6.9.zip上传到当前目录 3.3 解压ik分词器 1unzip elasticsearch-analysis-ik-5.6.9.zip 将elasticsearch重命名为ik 1mv elasticsearch ik 删除zip文件 1rm -f elasticsearch-analysis-ik-5.6.9.zip 重启es，我们会发现启动时的信息多了一个关于ik的信息，如图所示 12[2019-08-23T16:20:11,471][INFO ][o.w.a.d.Monitor ] try load config from &#x2F;opt&#x2F;yusys&#x2F;elasticsearch&#x2F;elasticsearch-5.6.9&#x2F;config&#x2F;analysis-ik&#x2F;IKAnalyzer.cfg.xml[2019-08-23T16:20:11,472][INFO ][o.w.a.d.Monitor ] try load config from &#x2F;opt&#x2F;yusys&#x2F;elasticsearch&#x2F;elasticsearch-5.6.9&#x2F;plugins&#x2F;ik&#x2F;config&#x2F;IKAnalyzer.cfg.xml 4 其他4.1 参考资料手把手教你搭建一个 Elasticsearch 集群 Elasticsearch集群架构的部署和调优 Linux离线安装ElasticSearch Linux 安装Elasticsearch和配置ik分词器步骤","categories":[{"name":"中间件","slug":"中间件","permalink":"https://luhongyan.gitee.io/blog/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"},{"name":"ES","slug":"中间件/ES","permalink":"https://luhongyan.gitee.io/blog/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/ES/"}],"tags":[{"name":"中间件","slug":"中间件","permalink":"https://luhongyan.gitee.io/blog/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"},{"name":"ES","slug":"ES","permalink":"https://luhongyan.gitee.io/blog/tags/ES/"}]},{"title":"Thinkpad E545扩展内存条后蓝屏问题解决","slug":"Thinkpad E545扩展内存条后蓝屏问题解决","date":"2014-05-31T16:00:00.000Z","updated":"2014-05-31T16:00:00.000Z","comments":true,"path":"post/c9ba378.html","link":"","permalink":"https://luhongyan.gitee.io/blog/post/c9ba378.html","excerpt":"最近新买了个Thinkpad E545同时我也扩展内存到8G，当时供应商是先做的系统，系统是WIN7 64位，后安装的内存条。当时随便点了点没有发现什么异常情况。","text":"最近新买了个Thinkpad E545同时我也扩展内存到8G，当时供应商是先做的系统，系统是WIN7 64位，后安装的内存条。当时随便点了点没有发现什么异常情况。 晚上回家后安装各种常用的软件，尤其登陆QQ后，QQ持续性的崩溃，然后电脑不定期蓝屏。当时以为是系统的问题，我就重新用U盘做了一个纯净版的WIN7 64位系统，但是安装的过程中也是一直蓝屏。 第二天，我去供应商那处理，他们给我换了一个内存条，当时测试了一会没发现问题，回家后又出现蓝屏和不兼容的情况。 最后我通过度娘和联想客服了解到，内存条分为低压(1.35V)和正常(1.5V)，区别就是内存条上面有编号PC3、PC3L，有PC3字样的就是正常的，有PC3L字样的就是低压的。 我的本子自带的是1.35V的内存条，他们给我装的是1.5V的，所以一直不兼容，更好成1.35V的内存条后立马OK了。。。我的电脑这几天蓝屏了N次，就因为不兼容问题。。。伤啊。。。","categories":[{"name":"其他","slug":"其他","permalink":"https://luhongyan.gitee.io/blog/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"蓝屏","slug":"蓝屏","permalink":"https://luhongyan.gitee.io/blog/tags/%E8%93%9D%E5%B1%8F/"}]},{"title":"Flex ComboBox下拉列表不自动更新解决方法","slug":"Flex ComboBox下拉列表不自动更新解决方法","date":"2012-09-02T16:00:00.000Z","updated":"2012-09-02T16:00:00.000Z","comments":true,"path":"post/976a6e28.html","link":"","permalink":"https://luhongyan.gitee.io/blog/post/976a6e28.html","excerpt":"公司系统出现了个BUG，级联查询Combobox时发现下拉列表不自动更新，只更新了选中项，列表却没有更新。经过不懈的努力，终于找到问题的解决方法。","text":"公司系统出现了个BUG，级联查询Combobox时发现下拉列表不自动更新，只更新了选中项，列表却没有更新。经过不懈的努力，终于找到问题的解决方法。 12this.item.dataProvider &#x3D; this.itemArray;this.item.dropdown.dataProvider &#x3D; this.itemArray; 在对组件dataProvider赋值时同时也需要对dropdown.dataProvider重新赋值。这样显示的内容就是正确的了。","categories":[{"name":"WEB前端","slug":"WEB前端","permalink":"https://luhongyan.gitee.io/blog/categories/WEB%E5%89%8D%E7%AB%AF/"},{"name":"Flex","slug":"WEB前端/Flex","permalink":"https://luhongyan.gitee.io/blog/categories/WEB%E5%89%8D%E7%AB%AF/Flex/"}],"tags":[{"name":"Flex","slug":"Flex","permalink":"https://luhongyan.gitee.io/blog/tags/Flex/"}]},{"title":"Java中如何获取spring中配置的properties属性文件内容","slug":"Java中如何获取spring中配置的properties属性文件内容","date":"2012-06-20T16:00:00.000Z","updated":"2012-06-20T16:00:00.000Z","comments":true,"path":"post/48dfcf59.html","link":"","permalink":"https://luhongyan.gitee.io/blog/post/48dfcf59.html","excerpt":"本文介绍Java中如何获取spring中配置的properties属性文件内容","text":"本文介绍Java中如何获取spring中配置的properties属性文件内容 1、通过spring配置properties文件 1234567891011&lt;bean id&#x3D;&quot;propertyConfigurer&quot; class&#x3D;&quot;com.tjsoft.base.util.CustomizedPropertyPlaceholderConfigurer&quot;&gt; &lt;property name&#x3D;&quot;ignoreResourceNotFound&quot; value&#x3D;&quot;true&quot; &#x2F;&gt; &lt;property name&#x3D;&quot;locations&quot;&gt; &lt;list&gt; &lt;value&gt;&#x2F;WEB-INF&#x2F;config&#x2F;jdbc.properties&lt;&#x2F;value&gt; &lt;value&gt;&#x2F;WEB-INF&#x2F;config&#x2F;mail.properties&lt;&#x2F;value&gt; &lt;value&gt;&#x2F;WEB-INF&#x2F;config&#x2F;system.properties&lt;&#x2F;value&gt; &lt;&#x2F;list&gt; &lt;&#x2F;property&gt;&lt;&#x2F;bean&gt; 其中class为自己定义的类 2、自定义类CustomizedPropertyPlaceholderConfigurer 12345678910111213141516171819202122232425262728293031323334353637import java.util.HashMap;import java.util.Map;import java.util.Properties; import org.springframework.beans.BeansException;import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer; &#x2F;** * 自定义PropertyPlaceholderConfigurer返回properties内容 * * @author LHY 2012-02-24 * *&#x2F;public class CustomizedPropertyPlaceholderConfigurer extends PropertyPlaceholderConfigurer &#123; private static Map&lt;String, Object&gt; ctxPropertiesMap; @Override protected void processProperties( ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) throws BeansException &#123; super.processProperties(beanFactoryToProcess, props); ctxPropertiesMap &#x3D; new HashMap&lt;String, Object&gt;(); for (Object key : props.keySet()) &#123; String keyStr &#x3D; key.toString(); String value &#x3D; props.getProperty(keyStr); ctxPropertiesMap.put(keyStr, value); &#125; &#125; public static Object getContextProperty(String name) &#123; return ctxPropertiesMap.get(name); &#125; &#125; 这样就可以通过CustomizedPropertyPlaceholderConfigurer类来获取properties属性文件中的内容了 3、如何获取属性文件的内容 1String host &#x3D; (String) CustomizedPropertyPlaceholderConfigurer.getContextProperty(&quot;mail.smtp.host&quot;);","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://luhongyan.gitee.io/blog/categories/JAVA/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://luhongyan.gitee.io/blog/tags/Java/"}]},{"title":"Flex自定义虚线","slug":"Flex自定义虚线","date":"2011-11-10T16:00:00.000Z","updated":"2011-11-10T16:00:00.000Z","comments":true,"path":"post/dde9807b.html","link":"","permalink":"https://luhongyan.gitee.io/blog/post/dde9807b.html","excerpt":"通过Flex画虚线","text":"通过Flex画虚线 1234567891011121314151617181920212223242526272829303132package com.tjsoft.utils&#123; import mx.core.UIComponent; public class GraphicsUtil &#123; public function GraphicsUtil() &#123; &#125; &#x2F;** * 画虚线 * @param u 指定画虚线的容器 * @param w 指定虚线的长度(间距) * @param uw 指定所画虚线的总长度 * @author LHY 2011-11-11 *&#x2F; public static function drawVirtualLine(u:UIComponent,w:Number,uw:Number):void &#123; u.graphics.clear();&#x2F;&#x2F;清除绘制到此 Graphics 对象的图形，并重置填充和线条样式设置。 u.graphics.lineStyle(1,0xa0a4a7,1);&#x2F;&#x2F;指定一种线条样式 var width:Number&#x3D;0; var i:int &#x3D; 0; while(width&lt;uw)&#123; u.graphics.moveTo(0+2*w*i,0); u.graphics.lineTo(0+w+2*w*i,0); width+&#x3D;w*2; i++; &#125; &#125; &#125;&#125;","categories":[{"name":"WEB前端","slug":"WEB前端","permalink":"https://luhongyan.gitee.io/blog/categories/WEB%E5%89%8D%E7%AB%AF/"},{"name":"Flex","slug":"WEB前端/Flex","permalink":"https://luhongyan.gitee.io/blog/categories/WEB%E5%89%8D%E7%AB%AF/Flex/"}],"tags":[{"name":"Flex","slug":"Flex","permalink":"https://luhongyan.gitee.io/blog/tags/Flex/"}]},{"title":"Flex设置DataGrid单元格颜色以及表头背景颜色渐变","slug":"Flex设置DataGrid单元格颜色以及表头背景颜色渐变","date":"2011-11-01T16:00:00.000Z","updated":"2011-11-01T16:00:00.000Z","comments":true,"path":"post/ddb6ceb4.html","link":"","permalink":"https://luhongyan.gitee.io/blog/post/ddb6ceb4.html","excerpt":"本文介绍Flex设置DataGrid单元格颜色以及表头背景颜色渐变","text":"本文介绍Flex设置DataGrid单元格颜色以及表头背景颜色渐变 1、 设置DataGrid单元格颜色 12345678910111213141516171819202122232425package com.tjsoft.base.common.page&#123; import flash.display.Sprite; import mx.controls.DataGrid; public class ColorsDataGrid extends DataGrid &#123; public function ColorsDataGrid() &#123; super(); &#125; &#x2F;** * * 设置单元格背景颜色 * * *&#x2F; override protected function drawRowBackground(s:Sprite, rowIndex:int, y:Number, height:Number, color:uint, dataIndex:int):void &#123; if(rowIndex%2&#x3D;&#x3D;1) &#123; color&#x3D;0xffffff; &#x2F;&#x2F;偶数行 &#125;else&#123; color&#x3D;0xefefef; &#x2F;&#x2F;奇数行 &#125; super.drawRowBackground(s,rowIndex,y,height,color,dataIndex); &#125; &#125; 2、 设置DataGrid表头背景颜色渐变 123[Bindable] private var backgroundColorFareArray:Array &#x3D; [0x1d72c1,0xb8e9fb];在DataGrid组件中设置headerColors&#x3D;&quot;&#123;backgroundColorFareArray&#125;&quot;","categories":[{"name":"WEB前端","slug":"WEB前端","permalink":"https://luhongyan.gitee.io/blog/categories/WEB%E5%89%8D%E7%AB%AF/"},{"name":"Flex","slug":"WEB前端/Flex","permalink":"https://luhongyan.gitee.io/blog/categories/WEB%E5%89%8D%E7%AB%AF/Flex/"}],"tags":[{"name":"Flex","slug":"Flex","permalink":"https://luhongyan.gitee.io/blog/tags/Flex/"}]}],"categories":[{"name":"BLOG","slug":"BLOG","permalink":"https://luhongyan.gitee.io/blog/categories/BLOG/"},{"name":"Volantis","slug":"BLOG/Volantis","permalink":"https://luhongyan.gitee.io/blog/categories/BLOG/Volantis/"},{"name":"中间件","slug":"中间件","permalink":"https://luhongyan.gitee.io/blog/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"},{"name":"ES","slug":"中间件/ES","permalink":"https://luhongyan.gitee.io/blog/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/ES/"},{"name":"其他","slug":"其他","permalink":"https://luhongyan.gitee.io/blog/categories/%E5%85%B6%E4%BB%96/"},{"name":"WEB前端","slug":"WEB前端","permalink":"https://luhongyan.gitee.io/blog/categories/WEB%E5%89%8D%E7%AB%AF/"},{"name":"Flex","slug":"WEB前端/Flex","permalink":"https://luhongyan.gitee.io/blog/categories/WEB%E5%89%8D%E7%AB%AF/Flex/"},{"name":"JAVA","slug":"JAVA","permalink":"https://luhongyan.gitee.io/blog/categories/JAVA/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://luhongyan.gitee.io/blog/tags/hexo/"},{"name":"Volantis","slug":"Volantis","permalink":"https://luhongyan.gitee.io/blog/tags/Volantis/"},{"name":"中间件","slug":"中间件","permalink":"https://luhongyan.gitee.io/blog/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"},{"name":"ES","slug":"ES","permalink":"https://luhongyan.gitee.io/blog/tags/ES/"},{"name":"蓝屏","slug":"蓝屏","permalink":"https://luhongyan.gitee.io/blog/tags/%E8%93%9D%E5%B1%8F/"},{"name":"Flex","slug":"Flex","permalink":"https://luhongyan.gitee.io/blog/tags/Flex/"},{"name":"Java","slug":"Java","permalink":"https://luhongyan.gitee.io/blog/tags/Java/"}]}